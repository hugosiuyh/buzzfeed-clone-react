{"ast":null,"code":"var _jsxFileName = \"/Users/hugo/code/buzzfeed-clone-react/src/components/AnswerBlock.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, forwardRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnswerBlock = (_ref, ref) => {\n  _s();\n  let {\n    answerOptions,\n    chosenAnswers\n  } = _ref;\n  const [result, setResult] = useState(null);\n  // const [scores, setScores] = useState({ \n  // 'rookie': 0, \n  // 'chun_li': 0, \n  // 'um_chile': 0, \n  // 'academic': 0, \n  // 'onika_burg': 0, \n  // 'emo_onika': 0, \n  // 'roman_zolanski': 0, \n  // 'barbie': 0 });\n\n  useEffect(() => {\n    answerOptions.forEach(answer => {\n      if (chosenAnswers.includes(answer.combination[0]) && chosenAnswers.includes(answer.combination[1]) && chosenAnswers.includes(answer.combination[2])) {\n        setResult(answer);\n      } else if (!result) {\n        setResult(answerOptions[0]);\n      }\n    });\n  }, [result]);\n\n  // // move this to question block later \n  // useEffect(() => {\n  //     if (chosenAnswerItems.every(item => item !== null)) {\n  //         // If the chosenAnswerItems array is fully filled, calculate the scores\n  //         let newScores = { \n  //             'rookie': 0, \n  //             'chun_li': 0, \n  //             'um_chile': 0, \n  //             'academic': 0, \n  //             'onika_burg': 0, \n  //             'emo_onika': 0, \n  //             'roman_zolanski': 0, \n  //             'barbie': 0 };\n\n  //         chosenAnswerItems.forEach((answer, index) => {\n  //             const question = jsonDatabase.questions[index];  // Retrieve the question by index\n  //             const answerScores = question.answers[answer];  // Retrieve the scores for the chosen answer\n  //             Object.keys(answerScores).forEach(nicki => {\n  //                 newScores[nicki] += answerScores[nicki];\n  //             });\n  //         });\n\n  //         setScores(newScores);  // Update the scores state\n  //     }\n  // }, [chosenAnswerItems, jsonDatabase.questions]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"answer-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: result === null || result === void 0 ? void 0 : result.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: result === null || result === void 0 ? void 0 : result.image,\n      alt: result === null || result === void 0 ? void 0 : result.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(AnswerBlock, \"otsdU8867Nll1OjDzAJiWNisW5I=\");\n_c = AnswerBlock;\nexport default _c2 = /*#__PURE__*/forwardRef(AnswerBlock);\nvar _c, _c2;\n$RefreshReg$(_c, \"AnswerBlock\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useEffect","useState","forwardRef","jsxDEV","_jsxDEV","AnswerBlock","_ref","ref","_s","answerOptions","chosenAnswers","result","setResult","forEach","answer","includes","combination","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","src","image","alt","_c","_c2","$RefreshReg$"],"sources":["/Users/hugo/code/buzzfeed-clone-react/src/components/AnswerBlock.jsx"],"sourcesContent":["import {useEffect, useState, forwardRef} from 'react'\n\nconst AnswerBlock = ({answerOptions, chosenAnswers}, ref) => {\n    const [result, setResult] = useState(null)\n    // const [scores, setScores] = useState({ \n    // 'rookie': 0, \n    // 'chun_li': 0, \n    // 'um_chile': 0, \n    // 'academic': 0, \n    // 'onika_burg': 0, \n    // 'emo_onika': 0, \n    // 'roman_zolanski': 0, \n    // 'barbie': 0 });\n\n    useEffect(() => {\n        answerOptions.forEach(answer => {\n            if (chosenAnswers.includes(answer.combination[0]) &&\n                chosenAnswers.includes(answer.combination[1]) &&\n                chosenAnswers.includes(answer.combination[2])\n            ) {\n                setResult(answer)\n            } else if (!result) {\n                setResult(answerOptions[0])\n            }\n        })\n    }, [result])\n\n    // // move this to question block later \n    // useEffect(() => {\n    //     if (chosenAnswerItems.every(item => item !== null)) {\n    //         // If the chosenAnswerItems array is fully filled, calculate the scores\n    //         let newScores = { \n    //             'rookie': 0, \n    //             'chun_li': 0, \n    //             'um_chile': 0, \n    //             'academic': 0, \n    //             'onika_burg': 0, \n    //             'emo_onika': 0, \n    //             'roman_zolanski': 0, \n    //             'barbie': 0 };\n    \n    //         chosenAnswerItems.forEach((answer, index) => {\n    //             const question = jsonDatabase.questions[index];  // Retrieve the question by index\n    //             const answerScores = question.answers[answer];  // Retrieve the scores for the chosen answer\n    //             Object.keys(answerScores).forEach(nicki => {\n    //                 newScores[nicki] += answerScores[nicki];\n    //             });\n    //         });\n    \n    //         setScores(newScores);  // Update the scores state\n    //     }\n    // }, [chosenAnswerItems, jsonDatabase.questions]);\n\n    return (\n        <div ref={ref} className=\"answer-block\">\n            <h2>{result?.text}</h2>\n            <img src={result?.image} alt={result?.text}/>\n        </div>\n    )\n}\n\nexport default forwardRef(AnswerBlock)"],"mappings":";;AAAA,SAAQA,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,WAAW,GAAGA,CAAAC,IAAA,EAAiCC,GAAG,KAAK;EAAAC,EAAA;EAAA,IAAxC;IAACC,aAAa;IAAEC;EAAa,CAAC,GAAAJ,IAAA;EAC/C,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IACZS,aAAa,CAACI,OAAO,CAACC,MAAM,IAAI;MAC5B,IAAIJ,aAAa,CAACK,QAAQ,CAACD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC,IAC7CN,aAAa,CAACK,QAAQ,CAACD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC,IAC7CN,aAAa,CAACK,QAAQ,CAACD,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC,EAC/C;QACEJ,SAAS,CAACE,MAAM,CAAC;MACrB,CAAC,MAAM,IAAI,CAACH,MAAM,EAAE;QAChBC,SAAS,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC;MAC/B;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,CAACE,MAAM,CAAC,CAAC;;EAEZ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACIP,OAAA;IAAKG,GAAG,EAAEA,GAAI;IAACU,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACnCd,OAAA;MAAAc,QAAA,EAAKP,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEQ;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBnB,OAAA;MAAKoB,GAAG,EAAEb,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEc,KAAM;MAACC,GAAG,EAAEf,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEQ;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd,CAAC;AAAAf,EAAA,CAzDKH,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AA2DjB,eAAAuB,GAAA,gBAAe1B,UAAU,CAACG,WAAW,CAAC;AAAA,IAAAsB,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}