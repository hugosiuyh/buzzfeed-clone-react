{"ast":null,"code":"var _jsxFileName = \"/Users/hugo/code/buzzfeed-clone-react/src/components/AnswerBlock.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, forwardRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnswerBlock = (_ref, ref) => {\n  _s();\n  let {\n    answerOptions,\n    chosenAnswers\n  } = _ref;\n  const [result, setResult] = useState(null);\n  const [scores, setScores] = useState({\n    'rookie': 0,\n    'chun_li': 0,\n    'um_chile': 0,\n    'academic': 0,\n    'onika_burg': 0,\n    'emo_onika': 0,\n    'roman_zolanski': 0,\n    'barbie': 0\n  });\n\n  // useEffect(() => {\n  //     answerOptions.forEach(answer => {\n  //         if (chosenAnswers.includes(answer.combination[0]) &&\n  //             chosenAnswers.includes(answer.combination[1]) &&\n  //             chosenAnswers.includes(answer.combination[2])\n  //         ) {\n  //             setResult(answer)\n  //         } else if (!result) {\n  //             setResult(answerOptions[0])\n  //         }\n  //     })\n  // }, [result])\n\n  // move this to question block later \n  useEffect(() => {\n    if (chosenAnswers.every(item => item !== null)) {\n      // chosen answer Items??\n      // If the chosenAnswerItems array is fully filled, calculate the scores\n      let newScores = {\n        'rookie': 0,\n        'chun_li': 0,\n        'um_chile': 0,\n        'academic': 0,\n        'onika_burg': 0,\n        'emo_onika': 0,\n        'roman_zolanski': 0,\n        'barbie': 0\n      };\n      chosenAnswers.forEach((answer, index) => {\n        const question = answerOptions[index]; // Retrieve the question by index\n        const answerScores = question.scores; // Retrieve the scores for the chosen answer\n        Object.keys(answerScores).forEach(nicki => {\n          newScores[nicki] += answerScores[nicki];\n        });\n      });\n      setScores(newScores); // Update the scores state\n\n      // find maximum and go back to answers\n      let maxNicki = Object.entries(newScores).reduce((max, _ref2) => {\n        let [nicki, score] = _ref2;\n        if (!max || score > max[1]) {\n          max = [nicki, score];\n        }\n        return max;\n      }, null);\n      console.log(maxNicki);\n      setResult(answerOptions[maxNicki]);\n    }\n  }, [result]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"answer-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: result === null || result === void 0 ? void 0 : result.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: result === null || result === void 0 ? void 0 : result.explanation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: result === null || result === void 0 ? void 0 : result.image,\n      alt: result === null || result === void 0 ? void 0 : result.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(AnswerBlock, \"E1dDDQ76nHHc02e/KrnONDTw6R8=\");\n_c = AnswerBlock;\nexport default _c2 = /*#__PURE__*/forwardRef(AnswerBlock);\nvar _c, _c2;\n$RefreshReg$(_c, \"AnswerBlock\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["useEffect","useState","forwardRef","jsxDEV","_jsxDEV","AnswerBlock","_ref","ref","_s","answerOptions","chosenAnswers","result","setResult","scores","setScores","every","item","newScores","forEach","answer","index","question","answerScores","Object","keys","nicki","maxNicki","entries","reduce","max","_ref2","score","console","log","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","explanation","src","image","alt","_c","_c2","$RefreshReg$"],"sources":["/Users/hugo/code/buzzfeed-clone-react/src/components/AnswerBlock.jsx"],"sourcesContent":["import {useEffect, useState, forwardRef} from 'react'\n\nconst AnswerBlock = ({answerOptions, chosenAnswers}, ref) => {\n    const [result, setResult] = useState(null)\n    const [scores, setScores] = useState({ \n    'rookie': 0, \n    'chun_li': 0, \n    'um_chile': 0, \n    'academic': 0, \n    'onika_burg': 0, \n    'emo_onika': 0, \n    'roman_zolanski': 0, \n    'barbie': 0 });\n\n    // useEffect(() => {\n    //     answerOptions.forEach(answer => {\n    //         if (chosenAnswers.includes(answer.combination[0]) &&\n    //             chosenAnswers.includes(answer.combination[1]) &&\n    //             chosenAnswers.includes(answer.combination[2])\n    //         ) {\n    //             setResult(answer)\n    //         } else if (!result) {\n    //             setResult(answerOptions[0])\n    //         }\n    //     })\n    // }, [result])\n\n    // move this to question block later \n    useEffect(() => {\n        if (chosenAnswers.every(item => item !== null)) { // chosen answer Items??\n            // If the chosenAnswerItems array is fully filled, calculate the scores\n            let newScores = { \n                'rookie': 0, \n                'chun_li': 0, \n                'um_chile': 0, \n                'academic': 0, \n                'onika_burg': 0, \n                'emo_onika': 0, \n                'roman_zolanski': 0, \n                'barbie': 0 };\n    \n            chosenAnswers.forEach((answer, index) => {\n                const question = answerOptions[index];  // Retrieve the question by index\n                const answerScores = question.scores;  // Retrieve the scores for the chosen answer\n                Object.keys(answerScores).forEach(nicki => {\n                    newScores[nicki] += answerScores[nicki];\n                });\n            });\n    \n            setScores(newScores);  // Update the scores state\n\n            // find maximum and go back to answers\n            let maxNicki = Object.entries(newScores).reduce((max, [nicki, score]) => {\n                if (!max || score > max[1]) {\n                    max = [nicki, score];\n                }\n                return max;\n            }, null);\n            console.log(maxNicki);\n\n            setResult(answerOptions[maxNicki])\n\n        }\n    }, [result]);\n\n    return (\n        <div ref={ref} className=\"answer-block\">\n            <h2>{result?.text}</h2>\n            <p>{result?.explanation}</p>\n            <img src={result?.image} alt={result?.text}/>\n        </div>\n    )\n}\n\nexport default forwardRef(AnswerBlock)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}